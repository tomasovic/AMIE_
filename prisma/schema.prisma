// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TodoStatus {
  NOT_STARTED
  IN_PROGRESS
  DONE
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  firstName          String?
  lastName           String?
  password           String
  todos              Todo[]
  lists              List[]
  thirdPartyAccounts ThirdPartyAccount[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model ThirdPartyAccount {
  id           Int      @id @default(autoincrement())
  service      String
  externalId   String
  accessToken  String
  refreshToken String?
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Todo {
  id          Int        @id @default(autoincrement())
  title       String
  description String?
  done        Boolean    @default(false)
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  subtasks    Subtask[]
  list        List?      @relation(fields: [listId], references: [id])
  listId      Int?
  status      TodoStatus @default(NOT_STARTED)
  deletedAt   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Subtask {
  id        Int        @id @default(autoincrement())
  title     String
  done      Boolean    @default(false)
  todoId    Int
  todo      Todo       @relation(fields: [todoId], references: [id], onDelete: Cascade)
  status    TodoStatus @default(NOT_STARTED)
  deletedAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model List {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  todos       Todo[]
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
